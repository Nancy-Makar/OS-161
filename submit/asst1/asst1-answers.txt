sys161: System/161 release 2.0.3, compiled Aug 10 2015 13:31:07

OS/161 base system version 1.99.08
Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
   President and Fellows of Harvard College.  All rights reserved.

Put-your-group-name-here's system version 0 (DUMBVM #2)

292k physical memory available
Device probe...
lamebus0 (system main bus)
emu0 at lamebus0
ltrace0 at lamebus0
ltimer0 at lamebus0
beep0 at ltimer0
rtclock0 at ltimer0
lrandom0 at lamebus0
random0 at lrandom0
lhd0 at lamebus0
lhd1 at lamebus0
lser0 at lamebus0
con0 at lser0

cpu0: MIPS/161 (System/161 2.x) features 0x0
OS/161 kernel [? for menu]:
------------------------------------------
commit 09f82fdcb6497c25919d60fe3125cfcfe9113799 (HEAD -> master, tag: asst1-start, origin/master)
Author: Nancy Makar <nmakar@ssh-linux4.ece.ubc.ca>
Date:   Sat Sep 18 20:31:44 2021 -0700

    Initial commit of os161 for CPEN331
------------------------------------------
asst1-start
------------------------------------------
Step 5:
Question 1 -> The first line of OS/161 code that is executed when a trap occurs is in the file 
/os161/src/kern/arch/mips/locore/exceptions-mips1.S
The control is transferred to the mips_trap function (in kern/arch/mips/locore/trap.c) whish is called by the trap handler (in os161/src/kern/arch/mips/locore/exceptions-mips1.S)
The trap handler determins the type od trap, if it is an interrupt it calls the interrupt handler function, mainbus_interrubt, which is in kern/arch/sys161/dev/lamebus_machdep.c

Question 2 -> The code that invokes system calls and causes traps is in kern/arch/mips/locore/trap.c at lines 216-226 and the syscall() fuction is called at line 216.

Question 3-> The kernel and user-level code share the same C library cod. So of the user decided to edit some of the libarary functions he can edit the files in userland without affecting the libarary used by the kernel since the user doe not have access to it.

Question 4 -> What might invalidate that configuration and make you need/want to rerun it is being in the wrong place, which is not in kern.
Conigure configures the target hardware and machine type and the optimize/debug flag. 

Question 5 -> A function is dependent if it is code relies on storing ins pecific addresses, or mapping device registers to specific addresses in the hardware or installing exception handlers at specific addresse (a.k.a hardware functionality).
It is important to separate machine-dependent code from machine-independent so when you transfer when machine to another you know what pieces of code would work on the new machine (machine-independent) and what other piecese would not work and needs to be w=re-written (machine-depdndent).

Question 6 -> the trapframe struct has 37 variables to save all processor registers that might contain user data in addition to some data about the cause of the exception (stored in tf_cause) and the contenst of the PC register when the exception occurred (store in tf_epc) and dummy registers for gdb and other registers.

Question 7 -> If you changed the configuration of the kernel or change the hearder files or the autoconf.h, because you will have to recompile and hence re-run.

Question 8 -> If you change any of the source files.

Question 9 -> Whenever you make changes to the kernel code.

Question 10 -> In the file kern/startup/menu.c we add a function that prints ¨Hello World!¨, like this :
cmd_helloWorld(int nargs, char **args)
{
	(void)nargs;
	(void)args;

	kprintf(¨Hello world!\n¨);

	return 0;
}
Then in the same file in the char array opsmenu, we add something like this:
[hello]       Print hello world                     
and in the cmdtable below we add something like this:
{ "hello",	cmd_helloWorld },

Question 11 -> The standard utilities that are present on my machine are not compiled for the OS161 OS or the MIPS architecture (as we have seen that some utilities are machine-specific). In addition, my machine will be using different system calls. 

Question 12 -> as seen in userland/lib/crt0/mips/crt0.S, the return value is transferred from V0 to S0 (line 85) and then from s0 to a0 (line 85). 

Question 13 -> 1) os161/src/kern/include/kern/syscall.h - We add and entry for the new system call
	       2) os161/src/kern/arch/mips/syscall/syscall.c - Add a case for the new system call
	       3) os161/src/kern/include/syscall.h	- We add a prototype for IN-KERNEL entry point to implement the new system call
	       4) os161/src/kern/syscall 	- We create a new .c file for the new system call
Then in 
kern/conf run ¨./config DUMBVMin¨ and in /os161/src/kern/compile/DUMBVM run : bmake depend (assuming a new source file will be added), bmake and bmake install


Question 14 -> start

Question 15 -> addiu sp, sp, -24

Question 16 -> (gdb) info breakpoints
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x800139e4 in kmain at ../../main/main.c:211
        breakpoint already hit 1 time
2       breakpoint     keep y   0x800139ec in kmain at ../../main/main.c:213

Question 17 -> start.S sets the exception handler, flushes the instruction cache, set up the status register, loads the CPU number into the PTBASE field of the CONTEXT register and load the GP register the calls ¨kmain¨
kmain calls ¨boot()¨
boot() prints some statements and then initializes RAM, the  process information pseudo-file system, threads, the hardlocks, devices and pseudo devices and VM. boot() then returns to kmain which then calls menu().

Question 18 -> jal kmain , which calls main

Question 19 -> 
109             ram_bootstrap();
(gdb) n
110             proc_bootstrap();
(gdb) n
111             thread_bootstrap();
(gdb) n
112             hardclock_bootstrap();
(gdb) n
113             vfs_bootstrap();
(gdb) n
114             kheap_nextgeneration();

Question 20 -> (gdb) print *bootcpu
Cannot access memory at address 0x80000

Question 21 -> print *bootcpu
$1 = {c_self = 0x8003af00, c_number = 0, c_hardware_number = 0, c_curthread = 0x8003bf80, c_zombies = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af1c,
      tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af10, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_hardclocks = 0, c_spinlocks = 0, c_isidle = false,
  c_runqueue = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af44, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af38, tln_next = 0x0, tln_self = 0x0}, tl_count = 0},
  c_runqueue_lock = {splk_lock = 0, splk_holder = 0x0}, c_ipi_pending = 0, c_shootdown = {{ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0, c_ipi_lock = {
    splk_lock = 0, splk_holder = 0x0}}

Question 22 ->(gdb) cpuarray allcpus
0 cpus

(gdb) print allcpus
$1 = {arr = {v = 0x0, num = 0, max = 0}}


Question 23 ->
(gdb) cpuarray allcpus
1 cpus
cpu 0:
$3 = {c_self = 0x8003af00, c_number = 0, c_hardware_number = 0, c_curthread = 0x8003bf80, c_zombies = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af1c,
      tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af10, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_hardclocks = 1, c_spinlocks = 0, c_isidle = false,
  c_runqueue = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af44, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af38, tln_next = 0x0, tln_self = 0x0}, tl_count = 0},
  c_runqueue_lock = {splk_lock = 0, splk_holder = 0x0}, c_ipi_pending = 0, c_shootdown = {{ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0, c_ipi_lock = {
    splk_lock = 0, splk_holder = 0x0}}
    
 (gdb) print allcpus
$2 = {arr = {v = 0x80039fe0, num = 1, max = 4}}

